apiVersion: ops.crossplane.io/v1alpha1
kind: CronOperation
metadata:
  name: rds-intelligent-scaling-cron
  labels:
    provider: aws
    type: intelligent-scaling-cron
    feature: cost-effective-scheduled-scaling
spec:
  concurrencyPolicy: Forbid
  successfulHistoryLimit: 5
  failedHistoryLimit: 1
  
  operationTemplate:
    spec:
      mode: Pipeline
      pipeline:
      - functionRef:
          name: upbound-function-claude
        input:
          apiVersion: claude.fn.upbound.io/v1alpha1
          kind: Prompt
          systemPrompt: |
            You are an intelligent RDS scaling system that runs on a scheduled basis to analyze 
            CloudWatch metrics and make cost-effective scaling decisions for AWS RDS instances 
            managed by Crossplane.
            
            You should use the tools available to you to discover and analyze XSQLInstance resources.
          userPrompt: |
            You are running a scheduled analysis of a specific RDS instance for scaling decisions.
            
            TARGET RESOURCE: XSQLInstance named "rds-metrics-database-yury" 
            
            STEP 1: Use available tools to fetch the specific XSQLInstance resource
            - Fetch XSQLInstance resource: "rds-metrics-database-yury"
            - This resource uses composition "xsqlinstances-rds-metrics.aws.platform.upbound.io"
            
            STEP 2: Analyze the fetched XSQLInstance resource:
            1. Check performance metrics in status.performanceMetrics
            2. Check current instanceClass in spec.parameters.instanceClass
            3. Check if analysis was done recently (intelligent-scaling annotations)
            
            RATE LIMITING:
            - Skip analysis if "intelligent-scaling/last-analyzed" annotation exists and is < 15 minutes old
            - Only proceed if no recent analysis or if metrics show significant changes
            
            SCALING TRIGGERS (conservative for cost control):
            - CPU > 85%: scale up instance class
            - FreeableMemory < 15%: scale up for memory pressure  
            - DatabaseConnections > 85% of max: scale up for connection pressure
            
            INSTANCE CLASS PROGRESSION:
            db.t3.micro → db.t3.small → db.t3.medium → db.t3.large
            
            STEP 3: For each resource that needs updates, output JSON:
            
            If scaling is needed:
            {
              "apiVersion": "aws.platform.upbound.io/v1alpha1",
              "kind": "XSQLInstance", 
              "metadata": {
                "name": "rds-metrics-database-yury",
                "annotations": {
                  "intelligent-scaling/last-scaled": "<current-timestamp-iso8601>",
                  "intelligent-scaling/last-scaled-decision": "<reasoning-for-scaling>"
                }
              },
              "spec": {
                "parameters": {
                  "instanceClass": "<new-instance-class>"
                }
              }
            }
            
            If no scaling needed but analysis should be recorded:
            {
              "apiVersion": "aws.platform.upbound.io/v1alpha1", 
              "kind": "XSQLInstance",
              "metadata": {
                "name": "rds-metrics-database-yury",
                "annotations": {
                  "intelligent-scaling/last-analyzed": "<current-timestamp-iso8601>",
                  "intelligent-scaling/last-scaled-decision": "<reasoning-for-no-scaling>"
                }
              }
            }
            
            STEP 4: Provide summary analysis
            Report on:
            - Total XSQLInstance resources found
            - Resources analyzed vs skipped (due to recent analysis)
            - Scaling decisions made
            - Estimated cost impact
            
            Use the tools available to you to fetch the specific XSQLInstance resource and perform this analysis.
            Begin by fetching XSQLInstance "rds-metrics-database-yury" and analyzing its current state and metrics.
        step: upbound-function-claude
        credentials:
        - name: claude
          source: Secret
          secretRef:
            namespace: crossplane-system
            name: claude
      retryLimit: 3
  schedule: '*/1 * * * *'  # Run every 15 minutes
