apiVersion: ops.crossplane.io/v1alpha1
kind: CronOperation
metadata:
  name: rds-intelligent-scaling-cron
  labels:
    provider: aws
    type: intelligent-scaling-cron
    feature: cost-effective-scheduled-scaling
spec:
  concurrencyPolicy: Forbid
  successfulHistoryLimit: 5
  failedHistoryLimit: 1

  operationTemplate:
    spec:
      mode: Pipeline
      pipeline:
      - step: upbound-function-claude
        functionRef:
          name: upbound-function-claude
        requirements:
          requiredResources:
          - apiVersion: aws.platform.upbound.io/v1alpha1
            kind: XSQLInstance
            matchLabels:
              scale: me
            requirementName: ops.crossplane.io/watched-resource
        input:
          apiVersion: claude.fn.upbound.io/v1alpha1
          kind: Prompt
          systemPrompt: |
            You are an intelligent RDS scaling system that analyzes XSQLInstance resources
            and makes scaling decisions based on CloudWatch performance metrics.
          userPrompt: |
            You are analyzing an XSQLInstance resource for potential RDS scaling needs.

            SCALING ANALYSIS CRITERIA:
            1. Check performance metrics in status.performanceMetrics
            2. Check current instanceClass in spec.parameters.instanceClass
            3. Check if analysis was done recently (intelligent-scaling annotations)

            RATE LIMITING:
            - Skip analysis if "intelligent-scaling/last-analyzed" annotation exists and is < 5 minutes old
            - Only proceed if no recent analysis or if metrics show significant changes

            SCALING TRIGGERS (conservative for cost control):
            - SCALE UP: CPU > 85%, Memory < 15%, Connections > 85%
            - SCALE DOWN: CPU < 20% AND Memory > 60% AND Connections < 30% for sustained period

            INSTANCE CLASS PROGRESSION (bidirectional):
            db.t3.micro ↔ db.t3.small ↔ db.t3.medium ↔ db.t3.large

            DOWNSCALING SAFETY:
            - Only scale down if ALL conditions met for sustained period
            - Check last-scaled annotation to prevent frequent changes
            - Ensure minimum 15-minute cooldown between scaling events

            REQUIRED OUTPUT FORMAT:
            You must output the XSQLInstance resource in JSON format with ONLY the fields that need to be patched.

            If scaling is needed:
            {
              "apiVersion": "aws.platform.upbound.io/v1alpha1",
              "kind": "XSQLInstance",
              "metadata": {
                "name": "<exact-resource-name>",
                "annotations": {
                  "intelligent-scaling/last-scaled": "<current-timestamp-iso8601>",
                  "intelligent-scaling/last-scaled-decision": "<reasoning-for-scaling>"
                }
              },
              "spec": {
                "parameters": {
                  "instanceClass": "<new-instance-class>"
                }
              }
            }

            If no scaling is needed:
            {
              "apiVersion": "aws.platform.upbound.io/v1alpha1",
              "kind": "XSQLInstance",
              "metadata": {
                "name": "<exact-resource-name>",
                "annotations": {
                  "intelligent-scaling/last-analyzed": "<current-timestamp-iso8601>",
                  "intelligent-scaling/last-scaled-decision": "<reasoning-for-no-scaling>"
                }
              }
            }

            Rules:
            - Use the exact resource name from the input
            - Only include fields that need to be updated
            - Use current timestamp in ISO8601 format
            - Provide brief, clear reasoning in annotations
            - Output only the JSON, no explanatory text

            XSQLInstance Resource:
            {{ .Resources }}
        credentials:
        - name: claude
          source: Secret
          secretRef:
            namespace: crossplane-system
            name: claude
      retryLimit: 3
  schedule: '*/1 * * * *'  # Run every 2 minutes for demo
