apiVersion: ops.crossplane.io/v1alpha1
kind: CronOperation
metadata:
  name: rds-intelligent-scaling-cron
  labels:
    provider: aws
    type: intelligent-scaling-cron
    feature: cost-effective-scheduled-scaling
spec:
  operationTemplate:
    spec:
      mode: Pipeline
      pipeline:
      - functionRef:
          name: upbound-function-claude
        input:
          apiVersion: claude.fn.upbound.io/v1alpha1
          kind: Prompt
          systemPrompt: |
            You are an intelligent RDS scaling system that runs on a scheduled basis to analyze 
            CloudWatch metrics and make cost-effective scaling decisions for AWS RDS instances 
            managed by Crossplane. Your task is to find XSQLInstance resources with rds-metrics 
            composition, analyze their performance metrics, and determine if instance class 
            scaling is needed.
          userPrompt: |
            <instructions>
            You are analyzing all XSQLInstance resources for potential RDS scaling decisions on a scheduled basis.
            
            1. Find and analyze XSQLInstance resources that:
               - Use composition "xsqlinstances-rds-metrics.aws.platform.upbound.io" 
               - Have performance metrics in status.performanceMetrics
            
            2. SCALING TRIGGERS (conservative for cost control):
               - CPU > 85%: scale up instance class
               - FreeableMemory < 15%: scale up for memory pressure  
               - DatabaseConnections > 85% of max: scale up for connection pressure
            
            3. INSTANCE CLASS PROGRESSION:
               db.t3.micro → db.t3.small → db.t3.medium → db.t3.large
            
            4. For each XSQLInstance that needs scaling:
               - Output the XSQLInstance with updated instanceClass in spec.parameters
               - Include "intelligent-scaling/last-scaled" annotation with current timestamp (e.g., "2025-08-11T11:00:00Z")
               - Include "intelligent-scaling/last-scaled-decision" annotation with detailed reasoning for the scaling decision
            
            5. For XSQLInstance resources with no scaling needed:
               - Output them with added annotations (but no spec changes):
                 - "intelligent-scaling/last-analyzed" annotation with current timestamp
                 - "intelligent-scaling/last-scaled-decision" annotation explaining why no scaling was needed
            
            6. REPORTING RESULTS:
               Instead of creating ConfigMaps, provide a detailed analysis summary in your response text.
               This will be captured in the operation status for audit and monitoring.
               
               Include this structured summary at the end of your response:
               
               [SCALING_ANALYSIS_SUMMARY]
               TIMESTAMP: 2025-08-11T11:00:00Z
               RESOURCES_ANALYZED: list of XSQLInstance names analyzed
               SCALING_DECISIONS: list of scaling actions taken (or "no scaling needed")
               METRICS_SUMMARY: key performance metrics observed
               COST_IMPACT: estimated monthly cost changes (if any)
               RECOMMENDATIONS: any operational recommendations
               [/SCALING_ANALYSIS_SUMMARY]
            
            7. Use submit_yaml_stream tool to output YAML manifests for any XSQLInstance resources
            
            ANNOTATION EXAMPLES:
            
            For scaling action:
            intelligent-scaling/last-scaled: "2025-08-11T11:00:00Z"
            intelligent-scaling/last-scaled-decision: "CPU at 87% for 10+ minutes, scaled from db.t3.micro to db.t3.small"
            
            For no scaling needed:
            intelligent-scaling/last-analyzed: "2025-08-11T11:00:00Z" 
            intelligent-scaling/last-scaled-decision: "CPU at 15%, Memory 60% free, Connections 2/40 - all metrics within normal ranges"
            
            CRITICAL: 
            - Only modify instanceClass field in spec, preserve all other XSQLInstance spec parameters
            - Each manifest must include upbound.io/name annotation for identification
            - Always add decision reasoning to XSQLInstance annotations for audit trail
            - Provide detailed analysis in your response text for operation status
            </instructions>

            Analyze all XSQLInstance resources with rds-metrics composition and determine scaling needs.
            Output updated XSQLInstances if scaling changes are needed, and provide detailed analysis summary in your response.
        step: upbound-function-claude
        credentials:
        - name: claude
          source: Secret
          secretRef:
            namespace: crossplane-system
            name: claude
      retryLimit: 3
  schedule: '*/1 * * * *'  # Run every 30 minutes for cost efficiency
